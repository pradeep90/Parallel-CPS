				Implementation Notes

* pCPS
** Resources
*** https://github.com/chmaruni/XSched
** [[file:Papers/Parallel-CPS-Papers/Static-Analysis-of-Dynamic-Schedules-angerer2010lcpc.pdf][Static Analysis Of Dynamic Schedules]]
*** Section 4.3 - Dependence Reduction by removing -> statements
**** This does it by calculating read- and write-sets
** So, basically, this + the original pCPS paper should be enough for me to get a rudimentary version working
** DONE The only confusion now: when does the whole analysis take place?
*** The schedule construction and optimization and stuff?
*** Runtime?
*** VVIP Static analysis?
**** You actually take a method and optimize the schedule that the compiler will generate for it
** VVIP Why do we pass in =Activation later=?
*** i.e., why left = fib(n - 1, sum) instead of just left = fib(n - 1, <nothing>)?
*** So that the tasks scheduled within left will also happen-before sum.
*** Else, you could have left -> sum, and left -> something-else, but something-else and sum could happen in parallel. WRONG!
** VVIP I think I'll have to use MiniJava cos in MicroJava a method stores its return value in an attribute which will cause calls to the same method to appear as if they have a data race
*** TODO Or maybe, MiniJava with MessageSend Statement so that we don't have to deal with the headache of serializing method calls
*** Or, to make it cleaner, MicroJava with return values
** I think there might be a problem when left sets its value in sum (so that sum can add it to =right='s value). Data race cos both left and right are accessing sum.
*** VVIP Somehow send in a reference to left to sum at the time of creation
** We would be left with just as many classes as there would be in the real CPS version, cos schedule(fib()) would mean that
*** We have to subclass MethodCall and put the "fib()" code in it
*** If we do that for all function calls (all tail form statements, essentially) we end up creating classes equivalent to the Continuation classes we create in real CPS
** VVIP So, we use as many classes (i.e., anonymous functions) as in CPS but we bundle them into tasks and schedule them within the original method so that we can optimize
** pCPS = Explicit scheduling (happens-before relation) + making functions into continuations/tasks so that we can automatically derive the happens-before relations
*** Explicit scheduling can be used anywhere. We just have to manually specify that a -> b
*** By breaking up a method into continuations (closures generally, but here continuation objects) and then scheduling them as tasks, we can analyze them and add happens-before relations between them as needed
*** We can then optimize the schedule statically
*** TODO Once we know who comes after you, you can pass that on to the subtasks you create, so they'll happen-before your successor
**** I think this is how it should be done
**** The paper though, somehow passes sum to left right from the beginning, before the optimization has been done
*** VVIP That's why it is called pCPS, cos you're getting your successor as an argument
*** pCPS vs CPS
**** Relax tail-call restriction
***** Allow more than one successor
* DONE Central Question: How to translate MicroJava into pCPS?
** Do I need to convert it into CPS before I convert it into pCPS?
** The fib example in the paper is deceptively simple. Doesn't show us the real complexity of the algorithm
** VVIP The main idea is that you add "left -> right" but you send "sum" as an argument to left so that the tasks that left creates will happen-before sum
*** DONE Question: Couldn't you just send in "right" and then use your optimizer to change the edges to actually point to "sum"?
*** Ok, so my idea is that we leave that place blank initially. Do the optimization.
*** Then, once you know your successor for sure, take it in as an argument
** DONE Ok. Assume I can somehow get pCPS code from MicroJava. How do I optimize the schedule? Which edges do I remove?
*** VVIP Basic optimization: Remove edges between 2 methods which only access local variables (and do not modify the argument object)
**** They should not modify their parent object either
**** VVIP In other words, pure functions
**** TODO But this method may be defined in terms of other method calls. How do I ensure that they too are pure functions?
**** First attempt:
***** Construct a static call graph between methods
***** VVIP Assume no inheritance, hence no dynamic binding. So there is no ambiguity about which method calls which methods
***** Mark the methods that access non-local stuff. Remove them. Remove all methods which depend on marked methods.
***** The remaining methods may be mutually recursive, but they are pure.
**** VVIP In other words, for now, assume there is an oracle boolean function which tells you which edges are unnecessary
*** Advanced optimization: Remove edges between 2 activations if their read- and write-sets are disjoint
**** But this seems VERY complex. Don't want to bite off more than I can chew.
*** VVIP For now, just have an interface through which some other code can answer isNecessary(a -> b)
* Code examples
** Sample code
#+begin_src java
  a = f();
  b = g();
  c = a + b;
  d = a * b;
  e = h(c + d);
  return h(e * 10);
#+end_src
** Sample code in CPS
#+begin_src java
  f(L(a){
          g(L(b){
                  c = a + b;
                  d = a * b;
                  h(c + d, L(e){
                          h(e * 10, k);
                      });
              });
      });
  
#+end_src
** Apparent pCPS
#+begin_src java
  four = schedule(L(e){
          h(e * 10);
      });
  three = schedule(L(b){
          c = a + b;
          d = a * b;
          h(c + d);
      }, four);
  two = schedule(g(), three);
  one = schedule(f(), two);
  
#+end_src
** Java pCPS
#+begin_src java
  class ContinuationOne extends Continuation {
      public void call(Activation later){
          f();
      }
  }
  
  class ContinuationFour extends Continuation {
      public void call(Activation later){
          g();
      }
  }
  
  class ContinuationThree extends Continuation {
      public void call(Activation later){
          c = a + b;
          d = a * b;
          h(c + d, later);
      }
  }
  
  class ContinuationFour extends Continuation {
      public void call(Activation later){
          h(e * 10, later);
      }
  }
  
  four = schedule(new ContinuationFour(),
                  new NullActivation());
  three = schedule(new ContinuationThree(), four);
  two = schedule(new ContinuationTwo(), three);
  one = schedule(new ContinuationOne(), two);
  
#+end_src
* Fib example
** original pCPS
#+begin_src java
  task fib(int k, Activation later) {
      if (k <= 2) {
          now.res = 1;
      } else {
          //make left and right available inside closure
          Activation left;
          Activation right;
          Activation then = now;
          Activation sum = sched(fun(){
                  //sum ’returns’ for fib()
                  then.res = ((int)left.res)
                  + ((int)right.res);
              });
          left = sched(fib(k-1, sum));
          right = sched(fib(k-2, sum));
          left→right; //inserted by naive translation
          right→sum;
          sum→later;
      }
  }
#+end_src
** my pCPS
#+begin_src java
  task fib(int k, Activation now, Activation later) {
      if (k <= 2) {
          now.res = 1;
      } else {
          //make left and right available inside closure
          Activation left = new Activation(new IntResult());
          Activation right = new Activation(new IntResult());
          Activation sum = new Activation(new IntResult());
          Activation then = now;
  
          left.continuation = new ContinuationLeft(k, left, right);
          right.continuation = new ContinuationRight(k, right, sum);
          sum.continuation = new ContinuationSum(then, left, right, sum, later);
          
          schedule(left);
          schedule(right);
          schedule(sum);
          left→right; //inserted by naive translation
          right→sum;
          sum→later;
      }
  }
    
    
  class Continuation{
      public void call(){
      }
  }
    
  class ContinuationLeft extends Continuation {
      int k;
      Activation later;
    
      public ContinuationLeft(int k, Activation now, Activation later){
          this.k = k;
          this.now = now;
          this.later = later;
      }
        
      public void call(){
          fib(k - 1, now, later);
      }
  }
    
  class ContinuationRight extends Continuation {
      int k;
      Activation later;
    
      public ContinuationLeft(int k, Activation now, Activation later){
          this.k = k;
          this.now = now;
          this.later = later;
      }
        
      public void call(){
          fib(k - 2, now, later);
      }
  }
    
  class ContinuationSum extends Continuation {
      Activation later;
    
      public ContinuationLeft(Activation then, Activation left,
                              Activation right, Activation now, Activation later){
          this.then = then;
          this.left = left;
          this.right = right;
          this.now = now;
          this.later = later;
      }
        
      public void call(){
          //sum ’returns’ for fib()
          then.res = ((int)left.res)
                  + ((int)right.res);
      }
  }
    
    
  
#+end_src
* Plan
** Scheduler
*** directed graph
**** Node<T extends Continuation> (???)
*** schedule(): Activation * Continuation -> void
**** Modify Activation
*** addEdge(): Activation * Activation -> void
*** removeReadyNode(): Graph -> Node
**** remove one node with in-degree = 0 from the graph
*** tryRunTask()
**** if no Ready node, wait for ready node
**** if no free thread, wait for free thread
***** or should it be enqueue task?
**** node = removeReadyNode()
**** schedule node to run in a thread
***** For testing, this could just be node.call()
*** For the initial version, I don't need to have thread pools and stuff.
**** I can just print the name of each task as I do node.call() and just let it run sequentially.
**** This way I can check that my scheduler schedules tasks correctly
*** What behaviour do I have to ensure and test?
**** It must execute tasks in the order of the schedule
***** This property is guaranteed by the graph's removeReadyNode() method.
**** It must execute as many parallel tasks as possible (in the thread pool)
*** TODO Threads
** What are the classes I need?
*** Scheduler
*** Continuation
*** Activation
*** Graph
*** Node??
** Continuation
*** call()
** Activation
*** task / continuation
*** result
*** getResult()
*** setResult()
*** run()
**** continuation.call()
** TODO Activation now
** Result
*** Subclass into different types ???
*** For now assume you have a hardcoded class for each of the primitive types and explicit casting to and from Object for the others
** Overall plan
*** mini java -> cps
*** cps -> pcps (activations + trivial schedule)
*** trivial schedule -> optimized schedule 
*** pcps + new schedule -> optimized pcps
*** pcps + scheduler -> parallelism
* Questions
** TODO How to pass in an activation (left) to sum without initializing left?
** TODO Is there any reason why he does "then = now" and passes only =then= instead of =now= directly?
* Ideas
** Refactor after every commit
** TODO I want to implement my Transformation code in a declarative fashion instead of doing it in a dreary imperative fashion
#+begin_src java
  // From visit(syntaxtree.MessageSend n):
  
  // MicroJava equivalent of MessageSend:
  
  Type temp;
  temp = primaryExpression;
  temp.foo(args);
  temp2 = temp.____foo_ret_val____;
  // temp2 is the final expression
#+end_src
*** Basically, some sort of code-rewriting mechanism. A DSL is in order here, methinks.
** Try to use preconditions
** Check out newCachedThreadPool later
** ULTIMATE Remember that if the other thread fails (cos of some exception or whatever), you will not come to know of it. Infinite loop could occur.
** TODO Maybe subclass ExecutorService or something to provide an Exception Handler
* Actions
** Think about design
   CLOCK: [2013-04-24 Wed 12:20]--[2013-04-24 Wed 18:20] =>  6:00
** DONE Try compiling with the JGraphT jar
   CLOCK: [2013-04-24 Wed 18:22]--[2013-04-24 Wed 19:19] =>  0:57
** DONE Get Ant to work for Inliner code
*** Mock project
    CLOCK: [2013-04-24 Wed 21:33]--[2013-04-24 Wed 21:33] =>  0:00
    CLOCK: [2013-04-24 Wed 19:19]--[2013-04-24 Wed 20:49] =>  1:30
*** Inliner
    CLOCK: [2013-04-24 Wed 21:43]--[2013-04-24 Wed 21:56] =>  0:13
**** DONE make compile
     CLOCK: [2013-04-24 Wed 21:56]--[2013-04-24 Wed 22:19] =>  0:23
**** DONE make run
**** DONE make test
     CLOCK: [2013-04-24 Wed 22:19]--[2013-04-25 Thu 00:29] =>  2:10
**** DONE jtb
     CLOCK: [2013-04-25 Thu 00:31]--[2013-04-25 Thu 01:20] =>  0:49
** DONE Write build.xml for Concurrent Programming project direct
   CLOCK: [2013-04-25 Thu 16:50]--[2013-04-25 Thu 17:07] =>  0:17
** DONE Flesh out Basic classes
   CLOCK: [2013-04-25 Thu 19:30]--[2013-04-25 Thu 19:39] =>  0:09
*** Activation
    CLOCK: [2013-04-25 Thu 19:40]--[2013-04-25 Thu 19:43] =>  0:03
*** Continuation Base class
    CLOCK: [2013-04-26 Fri 00:19]--[2013-04-26 Fri 00:19] =>  0:00
    CLOCK: [2013-04-25 Thu 21:54]--[2013-04-25 Thu 22:09] =>  0:15
*** Fib
    CLOCK: [2013-04-26 Fri 00:19]--[2013-04-26 Fri 00:25] =>  0:06
    CLOCK: [2013-04-25 Thu 21:44]--[2013-04-25 Thu 21:54] =>  0:10
*** DONE FibTest
    CLOCK: [2013-04-26 Fri 00:33]--[2013-04-26 Fri 01:07] =>  0:34
    CLOCK: [2013-04-26 Fri 00:19]--[2013-04-26 Fri 00:33] =>  0:14
*** DONE Just realized I need a Stack, not a queue, for my trivial Scheduler.
    CLOCK: [2013-04-26 Fri 01:07]--[2013-04-26 Fri 01:12] =>  0:05
** DONE Add @Override annotations
   CLOCK: [2013-04-26 Fri 01:12]--[2013-04-26 Fri 01:13] =>  0:01
** DONE Add directed graph
   :PROPERTIES:
   :Effort:   25
   :END:
*** DONE import jgrapht stuff
    CLOCK: [2013-04-26 Fri 01:13]--[2013-04-26 Fri 02:02] =>  0:49
    :PROPERTIES:
    :Effort:   5
    :END:
*** DONE Replace Stack with DirectedGraph
        DirectedGraph<URL, DefaultEdge> g =
            new DefaultDirectedGraph<URL, DefaultEdge>(DefaultEdge.class);
*** DONE removeReadyNode
*** DONE addEdge
*** DONE isEmpty
*** DONE test Graph stuff
    CLOCK: [2013-04-26 Fri 02:02]--[2013-04-26 Fri 02:46] =>  0:44

**** DONE make continuation out of your test code
     CLOCK: [2013-04-26 Fri 02:46]--[2013-04-26 Fri 03:00] =>  0:14
** DONE Make sure you remove later from the graph only after now
   CLOCK: [2013-04-26 Fri 03:00]--[2013-04-26 Fri 03:30] =>  0:30
*** e.g., now -> later
*** You remove now so that you can run it
*** But then, you see that later is ready and so you run it too... calamity
*** so, you must remove the edge only AFTER now has finished running
*** Plus, if you remove it eagerly, its subtasks will face a "vertex does not exist" error when trying to add an edge
** DONE Scheduler
*** DONE Changing the Graph changes the set returned by vertexSet()
    CLOCK: [2013-04-27 Sat 16:36]--[2013-04-27 Sat 18:17] =>  1:41
*** DONE Remove Stack stuff
    CLOCK: [2013-04-27 Sat 18:17]--[2013-04-27 Sat 18:35] =>  0:18
*** DONE addEdge => addTask
    CLOCK: [2013-04-27 Sat 18:35]--[2013-04-27 Sat 18:40] =>  0:05
** DONE Thread pool
   CLOCK: [2013-04-27 Sat 18:40]--[2013-04-27 Sat 18:59] =>  0:19
*** DONE Make Continuations implement Runnable
    CLOCK: [2013-04-27 Sat 18:59]--[2013-04-27 Sat 19:05] =>  0:06
*** DONE Printlining for Activation
    CLOCK: [2013-04-27 Sat 19:05]--[2013-04-27 Sat 19:35] =>  0:30
*** DONE think about thread stuff and contracts
    CLOCK: [2013-04-27 Sat 19:35]--[2013-04-27 Sat 21:30] =>  1:55
*** DONE try assert
    CLOCK: [2013-04-27 Sat 22:56]--[2013-04-27 Sat 23:18] =>  0:22
*** DONE put assert for areTasksRemaining, etc.
    CLOCK: [2013-04-27 Sat 23:18]--[2013-04-27 Sat 23:26] =>  0:08
*** DONE Use ThreadPool
    CLOCK: [2013-04-27 Sat 23:30]--[2013-04-28 Sun 02:06] =>  2:36
**** First of all, I think there are nodes left over when I terminate.
**** That's why I think LastActivation may cause an Assertion error and cup (in its own thread, thereby not notifying Scheduler or my console), leaving Scheduler in an infinite loop
***** It gives me proper assertion error when I remove the assertion in signalLastTaskDone()
*** DONE HUGE BUG: Scheduler should remove the current task only AFTER it has finished running NOT immediately after it has been scheduled.
    CLOCK: [2013-04-28 Sun 02:06]--[2013-04-28 Sun 02:27] =>  0:21
**** What do I do? (Concurrent Modification Error)
     CLOCK: [2013-04-28 Sun 02:27]--[2013-04-28 Sun 03:12] =>  0:45
***** I guess everybody will be accessing and modifying taskGraph.
***** Can I avoid it? If so, how?
*** Options regarding ConcurrentModificationException
**** Explicit lock
***** Might cause unnecessary slowdown
***** How is that unnecessary? You have to serialize this somehow. Unavoidable.
**** Make each Activation accumulate its changes (tasks and schedule) and commit it only at the end
***** May be costly if there are a LOT of subtasks
***** But then, my code generation would put all the happen-before calls at the end of the method anyway.
****** Or would it? :P
**** Make all methods accessing taskGraph =synchronized=
**** TODO Check out performance tradeoffs later.
**** Right now, go for a simple Lock on taskGraph - Not working out. Am gonna go through all the methods to check where the concurrent modification is happening
     CLOCK: [2013-04-28 Sun 21:30]--[2013-04-28 Sun 21:40] =>  0:10
***** Looking to Jon Skeet for reference
      http://stackoverflow.com/questions/5861894/how-to-synchonize-or-lock-variables-on-java#answer-5861918
*** DONE Recheck contracts for all methods
    CLOCK: [2013-04-28 Sun 21:40]--[2013-04-28 Sun 22:00] =>  0:20
**** What's happening in parallel?
***** Continuations will do addTask and happensBefore concurrently
***** Activations will do signalLastTaskDone concurrently
***** Scheduler will traverse the vertexSet in getReadyNode
****** However, this needn't be a problem.
****** We could do ensure that there is at least one node in vertexSet and simply iterate over the common vertexSet member variable
**** TODO Perhaps have a member variable for vertexSet
**** TODO See if left -> right -> sum works concurrently
     CLOCK: [2013-04-28 Sun 22:00]--[2013-04-28 Sun 22:13] =>  0:13
*** DONE Basic problem:
**** While the current task is running, getReadyNode may again find it to be "ready" and return it
***** => the same task may get scheduled any number of times before its first instance calls signalTaskDone
**** OUTDATED => possible infinite sequence of tasks
**** DONE Wrong. Not infinite. It's just that there would be additional tasks created, but the original sequence of tasks will still complete as per schedule
***** The data agrees
***** By the time the first Left was run, <BaseContinuation> had run 22-23 times
***** At that time, there were approx 22-23 nodes for Left, Right, and Sum.
***** And no <BaseContinuation>
**** DONE Solution: Add a =isScheduled= field to Activation
     CLOCK: [2013-04-28 Sun 22:13]--[2013-04-28 Sun 22:23] =>  0:10
***** This should ideally be part of the Graph, but no option as of now
***** Seems to solve the problem of lots of spurious task being scheduling
*** DONE Test linear schedule.
    CLOCK: [2013-04-29 Mon 00:53]--[2013-04-29 Mon 00:55] =>  0:02
    CLOCK: [2013-04-28 Sun 22:26]--[2013-04-28 Sun 23:10] =>  0:44
**** getReadyNode returns null sometimes
***** Have a listener on the graph
      CLOCK: [2013-04-28 Sun 23:10]--[2013-04-28 Sun 23:39] =>  0:29
****** ListenableDirectedGraph
***** When an edge is removed, check if the destination node's degree becomes zero.
      CLOCK: [2013-04-28 Sun 23:41]--[2013-04-28 Sun 23:58] =>  0:17
****** The data suggests that edgeRemoved is called after the source is removed (cos predecessorListOf(target) is empty)
***** VVIP If so, then it is an unscheduled ready node
***** unscheduled cos it had an in-edge so far
***** So, just increment an atomic counter (#unscheduled ready nodes) in Scheduler
***** TODO So, then tryWaitForReadyNode can just spin on atomic counter till it becomes > 0 (or until lastTaskDone)
****** ideally, it should wait on the atomic counter, but whatever 
**** ConcurrentModificationException for one method (cos I removed all the synchronized blocks)
*** DONE Test without the assert -> works sometimes
    CLOCK: [2013-04-29 Mon 01:17]--[2013-04-29 Mon 01:27] =>  0:10
*** DONE Ensure that contracts for methods hold after adding the isScheduled field and after ReadyNodeListener
    CLOCK: [2013-04-29 Mon 00:38]--[2013-04-29 Mon 00:53] =>  0:15
    CLOCK: [2013-04-29 Mon 00:22]--[2013-04-29 Mon 00:38] =>  0:16
*** DONE Test with non-linear schedule 
    CLOCK: [2013-04-29 Mon 00:55]--[2013-04-29 Mon 01:17] =>  0:22
    CLOCK: [2013-04-28 Sun 22:24]--[2013-04-28 Sun 22:26] =>  0:02
**** VVIP I think the ConcurrentModificationException happens when I try to print taskGraph (might be cos you need to ITERATE OVER THE NODES in toString())
**** VVIP It also happens when I iterate over taskGraph.vertexSet() in getReadyNode
*** DONE Try with synchronized blocks
    CLOCK: [2013-04-29 Mon 02:05]--[2013-04-29 Mon 02:26] =>  0:21
**** It works!!! I'm a Genius! Or am I?
*** DONE Try fib with k = 15
    CLOCK: [2013-04-29 Mon 02:26]--[2013-04-29 Mon 02:44] =>  0:18
**** It works at times, cups at other times
**** DONE I think it might be because an assert fails in the other thread => Deadlock
     CLOCK: [2013-04-29 Mon 02:44]--[2013-04-29 Mon 02:44] =>  0:00
***** Remove all asserts that can run in other threads
      CLOCK: [2013-04-29 Mon 02:44]--[2013-04-29 Mon 02:59] =>  0:15
***** DONE Try catching RuntimeException in Activation to see the Stack Trace in non-main threads - Master Stroke
      CLOCK: [2013-04-29 Mon 02:59]--[2013-04-29 Mon 03:02] =>  0:03
****** DONE I'm getting answers like 18 instead of 21 or 605 instead of 610, meaning that some threads' outputs must have been lost
*** DONE The problem seems to be that the last task somehow gets scheduled before everything else and when the others run afterward, you get exceptions like "no such vertex in graph" when trying to add an edge
**** But how could that be? How can (now -> left) go wrong? It is saying that either "now" or "left" isn't in the graph
**** In another case, either "sum" or "later" isn't in the graph.
**** DONE Whoa. Could it be because I'm doing addTask before happensBefore and so, getReadyNode is picking the newly added node before the others
***** DONE Quick check: put a +sleep+ long for loop between the two. i.e., force the error -> Confirmed
      CLOCK: [2013-04-29 Mon 03:32]--[2013-04-29 Mon 03:36] =>  0:04
****** sleep didn't do the trick
****** had to go for a for-loop
***** DONE How to make sure the newly added task isn't picked before its edges are added?
      CLOCK: [2013-04-29 Mon 03:37]--[2013-04-29 Mon 03:44] =>  0:07
****** getReadyNode is synchronized on "lock"
****** DONE So, synchronizing this on lock should prevent getReadyNode from picking off a task in the middle
** DONE Damn. Stack trace for Exceptions in other threads is now not being printed. Why?
   CLOCK: [2013-04-29 Mon 11:02]--[2013-04-29 Mon 12:12] =>  1:10
*** Cos it is now AssertionError not RuntimeException. Now catching that too.
*** NB: It is a bad practice. Doing this for development purposes only.
** DONE Problem: ConcurrentSkipListMap is a mathematical set - no duplicates
*** DONE define unique equals for Activation
    CLOCK: [2013-04-29 Mon 12:17]--[2013-04-29 Mon 12:19] =>  0:02
**** equals for Continuation
     CLOCK: [2013-04-29 Mon 12:19]--[2013-04-29 Mon 12:25] =>  0:06
**** DONE I think I'll just go with a unique id for each Activation
     CLOCK: [2013-04-29 Mon 12:25]--[2013-04-29 Mon 12:32] =>  0:07
** TODO Test with other pCPS programs (especially highly parallel programs like Mergesort)
** TODO Why not have a set of ready nodes? -> Maybe use this if the synchronized blocks in getReadyNode cause performance degradation.
   CLOCK: [2013-04-29 Mon 10:19]--[2013-04-29 Mon 11:02] =>  0:43
   CLOCK: [2013-04-29 Mon 01:27]--[2013-04-29 Mon 01:55] =>  0:28
*** ConcurrentSkipListMap
*** DONE Bug: cos Activation didn't implement Comparable, it gave a ClassCastException, but it was in the other thread and it failed -> deadlock
** TODO Make proper hashCode and equals for Activation, etc.
** TODO Make Fib.java look like a complete MiniJava program
** TODO Decouple the Task graph from the Scheduler. Make the Scheduler access the graph just like any other Activation.
** TODO See if numActiveTasks is accurate. Else, remove.
** TODO Profile the code
*** http://www.javaworld.com/jw-04-1997/jw-04-optimize.html
